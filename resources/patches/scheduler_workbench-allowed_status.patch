diff --git a/scheduler_workbench.module b/scheduler_workbench.module
old mode 100644
new mode 100755
index 868435e..4f577e5
--- a/scheduler_workbench.module
+++ b/scheduler_workbench.module
@@ -7,6 +7,22 @@
  */

 /**
+ * Implements hook_menu().
+ */
+function scheduler_workbench_menu() {
+  $items['admin/config/content/scheduler_workbench'] = array(
+    'title' => 'Workbench Scheduler publication states',
+    'description' => 'Select the states that can be scheduled for publication',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('scheduler_workbench_allowed_status_form'),
+    'access arguments' => array('scheduler workbench'),
+    'file' => 'scheduler_workbench.admin.inc',
+    'weight' => 0,
+    'type' => MENU_NORMAL_ITEM,
+  );
+  return $items;
+}
+/**
  * Implements hook_form_node_type_form_alter().
  *
  * Alters node_type forms to add fields to scheduler.
@@ -46,12 +62,15 @@ function scheduler_workbench_form_node_type_form_alter(&$form, $form_state) {
  * Implements hook_permission().
  */
 function scheduler_workbench_permission() {
-  return array(
-    'override default scheduler time' => array(
-      'title' => t('Override default scheduler time'),
-      'description' => t('Allow users to override the default un-publish schedule time'),
-    ),
+  $permissions['override default scheduler time'] = array(
+    'title' => t('Override default scheduler time'),
+    'description' => t('Allow users to override the default un-publish schedule time'),
+  );
+  $permissions['scheduler workbench'] = array(
+    'title' => t('Administer Scheduler Workbench'),
+    'description' => t('Perform administration tasks for Scheduler Workbench.'),
   );
+  return $permissions;
 }

 /**
@@ -161,6 +180,7 @@ function scheduler_workbench_node_update($node) {
   // Only update database if we need to (un)publish this node at some date
   // otherwise the user probably cleared out the (un)publish dates so we should
   // remove the record.
+  //print_R($node);
   if (!empty($node->revision_publish_on)) {
     $publish_on = _scheduler_strtotime($node->revision_publish_on);
     drupal_register_shutdown_function('_scheduler_workbench_save_scheduler_record', array(
@@ -172,7 +192,13 @@ function scheduler_workbench_node_update($node) {
     $replacements = array(
       '@publish_time' => format_date($publish_on, 'custom', $date_format),
     );
-    drupal_set_message(t('This revision is unpublished and will be published @publish_time.', $replacements), 'status', FALSE);
+    $message = t('This revision is unpublished and will be published @publish_time.', $replacements);
+    // Check if the current status will be published.
+    $allowed_status = variable_get('scheduler_workbench_allowed_status', array());
+    if (!in_array($node->workbench_moderation_state_new, $allowed_status)) {
+      $message .= t('The current status @status is not allowed to be published, you will need to update the status.', array('@status' => $node->workbench_moderation_state_new));
+    }
+    drupal_set_message($message, 'status', FALSE);
   }
 }

@@ -253,6 +279,23 @@ function _scheduler_workbench_scheduler_unpublish(&$node) {
  */
 function _scheduler_workbench_scheduler_pre_publish(&$node) {
   if ($state = variable_get('scheduler_publish_moderation_state_' . $node->type, FALSE)) {
+    // Get status allowed to be published.
+    $allowed_status = variable_get('scheduler_workbench_allowed_status', array());
+    foreach ($allowed_status as $key => $value) {
+      // If the status is not enabled we remove it from allowed status.
+      if (trim($value) != trim($key)) {
+        unset($allowed_status[$key]);
+      }
+    }
+    // Check if the revision current status allows it to be published.
+    if (!in_array($node->workbench_moderation['my_revision']->state, $allowed_status)) {
+      $options = array(
+        "%node" => $node->nid,
+        '%status' => $node->workbench_moderation['my_revision']->state,
+      );
+      watchdog("scheduler_workbench", t("Node %node can't be published, check status allowed to be published."), $options, WATCHDOG_INFO);
+      return;
+    }
     if (!empty($node->workbench_moderation['my_revision']) &&
       $node->workbench_moderation['my_revision']->state == $state
     ) {
