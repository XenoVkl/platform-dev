<?php

/**
 * @file
 * Code for newslettter feature install.
 */

/**
 * Implements hook_enable().
 */
function newsletters_enable() {
  drupal_set_message(t('Newsletters feature is now active on your site.'));
  db_update('simplenews_category')
    ->fields(array(
      'format' => 'html',
      'from_address' => 'EC-FP-INTERNET-SERVICES-DO-NOT-REPLY@ec.europa.eu',
    ))
    ->execute();
}

/**
 * Use soft config for newsletters comment form location and content type definition (NEPT-1680).
 */
function newsletters_install() {
  // Use soft config for newsletters comment form location.
  multisite_config_service('comment')->setThreadingCommentForContentType('simplenews', 1);

  // Create the content type.
  // Data taken of the content type from newletters.features.inc.
  $t = get_t();
  $simplenews = array(
    'type' => 'simplenews',
    'name' => $t('Simplenews newsletter'),
    'base' => 'node_content',
    'description' => $t('A newsletter issue to be sent to subscribed email addresses.'),
  );
  $node_type = node_type_set_defaults($simplenews);
  node_add_body_field($node_type, $t('Body'));
  node_type_save($node_type);
  // Create new fields.
  // Data taken from newsletters.features.field_base.inc.
  $fields = array(
    'field_related_contents'  => array(
      'active' => 1,
      'cardinality' => -1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'field_related_contents',
      'foreign keys' => array(
        'node' => array(
          'columns' => array(
            'target_id' => 'nid',
          ),
          'table' => 'node',
        ),
      ),
      'indexes' => array(
        'target_id' => array(
          0 => 'target_id',
        ),
      ),
      'locked' => 1,
      'module' => 'entityreference',
      'settings' => array(
        'handler' => 'base',
        'handler_settings' => array(
          'behaviors' => array(
            'views-select-list' => array(
              'status' => 0,
            ),
          ),
          'sort' => array(
            'direction' => 'ASC',
            'field' => 'body:value',
            'property' => 'nid',
            'type' => 'none',
          ),
          'target_bundles' => array(
            'article' => 'article',
            'page' => 'page',
          ),
        ),
        'handler_submit' => 'Change handler',
        'referenceable_types' => array(
          'article' => 'article',
          'page' => 'page',
        ),
        'target_type' => 'node',
      ),
      'translatable' => 0,
      'type' => 'entityreference',
    ),
  );
  foreach ($fields as $field) {
    field_create_field($field);
  }

  // Attach fields to content type.
  // Data taken from newsletters.features.field_instance.inc.
  $field_instances = array();

  // Exported field_instance: 'node-simplenews-field_related_contents'.
  $field_instances['node-simplenews-field_related_contents'] = array(
    'bundle' => 'simplenews',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'entityreference',
        'settings' => array(
          'link' => 1,
        ),
        'type' => 'entityreference_label',
        'weight' => 4,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_related_contents',
    'label' => $t('related contents'),
    'required' => 0,
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'entityreference',
      'settings' => array(
        'match_operator' => 'CONTAINS',
        'path' => '',
        'size' => 60,
      ),
      'type' => 'entityreference_autocomplete',
      'weight' => 130,
    ),
  );

  // Exported field_instance: 'node-simplenews-field_tags'.
  $field_instances['node-simplenews-field_tags'] = array(
    'bundle' => 'simplenews',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'inline',
        'module' => 'taxonomy',
        'settings' => array(),
        'type' => 'taxonomy_term_reference_link',
        'weight' => 3,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_tags',
    'label' => $t('Tags'),
    'required' => 0,
    'settings' => array(
      'user_field_privacy' => FALSE,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'taxonomy',
      'settings' => array(
        'autocomplete_path' => 'taxonomy/autocomplete',
        'size' => 60,
      ),
      'type' => 'taxonomy_autocomplete',
      'weight' => 120,
    ),
  );

  // Exported field_instance: 'node-simplenews-title_field'.
  $field_instances['node-simplenews-title_field'] = array(
    'bundle' => 'simplenews',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 5,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'title_field',
    'label' => $t('Title'),
    'required' => TRUE,
    'settings' => array(
      'entity_translation_sync' => FALSE,
      'hide_label' => array(
        'entity' => FALSE,
        'page' => FALSE,
      ),
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => -5,
    ),
  );

  foreach( $field_instances as $instance ) { // Loop through our instances
    field_create_instance($instance);
  }

  // Add field groups.
  // Data taken from newsletters.features.field_group.inc.
  $field_group1 = new stdClass();
  $field_group1->disabled = FALSE;
  $field_group1->api_version = 1;
  $field_group1->identifier = 'group_newsletter_metadata|node|simplenews|form';
  $field_group1->group_name = 'group_newsletter_metadata';
  $field_group1->entity_type = 'node';
  $field_group1->bundle = 'simplenews';
  $field_group1->mode = 'form';
  $field_group1->parent_name = '';
  $field_group1->label = 'Metadata';
  $field_group1->weight = '10';
  $field_group1->children = array(
      0 => 'field_related_contents',
      1 => 'field_tags',
      2 => 'language',
  );
  $field_group1->format_type = 'tab';
  $field_group1->format_settings = array(
      'formatter' => 'closed',
      'instance_settings' => array(
        'description' => '',
        'classes' => 'group-newsletter-metadata field-group-tab',
        'required_fields' => 1,
      ),
  );
  $field_groups = array();
  $field_groups['group_newsletter_metadata|node|simplenews|form'] = $field_group1;

  $field_group2 = new stdClass();
  $field_group2->disabled = FALSE;
  $field_group2->api_version = 1;
  $field_group2->identifier = 'group_simplenews|node|simplenews|form';
  $field_group2->group_name = 'group_simplenews';
  $field_group2->entity_type = 'node';
  $field_group2->bundle = 'simplenews';
  $field_group2->mode = 'form';
  $field_group2->parent_name = '';
  $field_group2->label = 'Content';
  $field_group2->weight = '0';
  $field_group2->children = array(
      0 => 'body',
      1 => 'field_simplenews_term',
      2 => 'title_field',
  );
  $field_group2->format_type = 'tab';
  $field_group2->format_settings = array(
      'formatter' => 'closed',
      'instance_settings' => array(
        'description' => '',
        'classes' => 'group-simplenews field-group-tab',
        'required_fields' => 1,
      ),
  );
  $field_groups['group_simplenews|node|simplenews|form'] = $field_group2;

  foreach( $field_groups as $group ) { // Loop through our instances
    field_group_group_save($group);
  }
}

/**
 * Implements hook_disable().
 */
function newsletters_disable() {
  multisite_drupal_toolbox_remove_block_context('site_wide', '0');
  drupal_set_message(t('Newsletters feature is now disabled on your site.'));
}

/**
 * Implements hook_uninstall().
 */
function newsletters_uninstall()
{
  // Remove existing content
  $query = 'SELECT nid ';
  $query .= 'FROM {node} ';
  $query .= 'WHERE {node}.type = :type ';
  $result = db_query( $query, array(':type' => 'simplenews') );
  $nids = array();

  foreach( $result as $row ) {
    $nids[] = $row->nid;
  }
  node_delete_multiple( $nids );

  // Delete fields and instances
  foreach( field_info_instances('node', 'simplenews') as $field_name  => $instance ) {
    field_delete_instance($instance);
  }
  // Delete content type
  node_type_delete('simplenews');
  // Purge field batch
  field_purge_batch(1000); // Purge delete fields data
}

/**
 * Update the title field of existing newsletters if any.
 */
function newsletters_update_7001(&$sandbox) {

  $t = get_t();
  // print_r(variable_get('language_content_type_simplenews', 0));
  // Check if the content type has content translation instead of entity translation
  $translation_support = variable_get('language_content_type_simplenews', 0);
  if ($translation_support != 2) { // 2 == TRANSLATION_ENABLED
    // Field instance for title_field.
    if (field_info_instance('node', 'title_field', 'simplenews')) {
      $instance_info = field_info_instance('node', 'title_field', 'simplenews');
      $instance_info['label'] = $t('Title');
      field_update_instance($instance_info);
    }
    else {
      $field_instances['node-simplenews-title_field'] = array(
        'bundle' => 'simplenews',
        'default_value' => NULL,
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 5,
          ),
          'teaser' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 0,
          ),
        ),
        'entity_type' => 'node',
        'field_name' => 'title_field',
        'label' => $t('Title'),
        'required' => TRUE,
        'settings' => array(
          'entity_translation_sync' => FALSE,
          'hide_label' => array(
            'entity' => FALSE,
            'page' => FALSE,
          ),
          'text_processing' => 0,
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'module' => 'text',
          'settings' => array(
            'size' => 60,
          ),
          'type' => 'text_textfield',
          'weight' => -5,
        ),
      );
      field_create_instance($field_instances['node-simplenews-title_field']);
    }

    $groups = field_group_read_groups(array(
      'entity_type' => 'node',
      'bundle' => 'simplenews',
      'mode' => 'form',
    ));

    if (field_group_exists('group_newsletter_metadata', 'node', 'simplenews', 'form')) {
      $group_newsletter_metadata = $groups['node']['simplenews']['form']['group_newsletter_metadata'];
      $group_newsletter_metadata->children[0] = 'field_related_contents';
      $group_newsletter_metadata->children[1] = 'field_tags';
      $group_newsletter_metadata->children[2] = 'language';
      field_group_group_save($group_newsletter_metadata);
    }
    else {
      $field_group1 = new stdClass();
      $field_group1->disabled = FALSE;
      $field_group1->api_version = 1;
      $field_group1->identifier = 'group_newsletter_metadata|node|simplenews|form';
      $field_group1->group_name = 'group_newsletter_metadata';
      $field_group1->entity_type = 'node';
      $field_group1->bundle = 'simplenews';
      $field_group1->mode = 'form';
      $field_group1->parent_name = '';
      $field_group1->label = 'Metadata';
      $field_group1->weight = '10';
      $field_group1->children = array(
          0 => 'field_related_contents',
          1 => 'field_tags',
          2 => 'language',
      );
      $field_group1->format_type = 'tab';
      $field_group1->format_settings = array(
          'formatter' => 'closed',
          'instance_settings' => array(
            'description' => '',
            'classes' => 'group-newsletter-metadata field-group-tab',
            'required_fields' => 1,
          ),
      );
      $field_groups = array();
      $field_groups['group_newsletter_metadata|node|simplenews|form'] = $field_group1;

      field_group_group_save($field_group1);
    }

    if (field_group_exists('group_simplenews', 'node', 'simplenews', 'form')) {
      $group_simplenews = $groups['node']['simplenews']['form']['group_simplenews'];
      $group_simplenews->children[0] = 'body';
      $group_simplenews->children[1] = 'field_simplenews_term';
      $group_simplenews->children[2] = 'title_field';
      field_group_group_save($group_simplenews);
    }
    else {
      $field_group2 = new stdClass();
      $field_group2->disabled = FALSE;
      $field_group2->api_version = 1;
      $field_group2->identifier = 'group_simplenews|node|simplenews|form';
      $field_group2->group_name = 'group_simplenews';
      $field_group2->entity_type = 'node';
      $field_group2->bundle = 'simplenews';
      $field_group2->mode = 'form';
      $field_group2->parent_name = '';
      $field_group2->label = 'Content';
      $field_group2->weight = '0';
      $field_group2->children = array(
          0 => 'body',
          1 => 'field_simplenews_term',
          2 => 'title_field',
      );
      $field_group2->format_type = 'tab';
      $field_group2->format_settings = array(
          'formatter' => 'closed',
          'instance_settings' => array(
            'description' => '',
            'classes' => 'group-simplenews field-group-tab',
            'required_fields' => 1,
          ),
      );
      $field_groups['group_simplenews|node|simplenews|form'] = $field_group2;

      field_group_group_save($field_group2);
    }

    // If this is the first pass through this update
    // function then set some variables.
    if (!isset($sandbox['total'])) {
      $result = db_query("SELECT nid FROM {node} WHERE type='simplenews'");
      $sandbox['total'] = $result->rowCount();
      $sandbox['current'] = 0;
    }

    // How many nodes should be processed per pass.
    $nodes_per_pass = 10;

    // Get the nodes to process during this pass.
    $result = db_query_range("SELECT nid FROM {node} WHERE type='simplenews'", $sandbox['current'], $nodes_per_pass);
    while ($row = $result->fetchAssoc()) {
      $node = node_load($row['nid']);
      $node->title = $node->title;

      $fields = field_info_instances('node', 'simplenews');

      foreach ($fields as $field_name => $field_definition) {
        $instance_info = field_info_instance('node', $field_name, 'simplenews');
        $instance_info['label'] = $t($instance_info['label']);
        field_update_instance($instance_info);

        $field_info = field_info_field($field_name);
        // TO DO: just change to translatable those fields
        // that should be translatable, as text, etc.
        if ($field_info['type'] == 'text' || $field_info['type'] == 'link' || $field_info['type'] == 'link') {
          $field_info['translatable'] = 1;
          field_update_field($field_info);
        }
      }

      node_save($node);
      drupal_set_message(t('We processed node @nid', array('@nid' => $node->nid)));

      // Increment "current" by 1.
      $sandbox['current']++;
    }
    // Set the value for finished.
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
    if ($sandbox['#finished'] === 1) {
      drupal_set_message(t('@nodes nodes were processed', array('@nodes' => $sandbox['total'])));
    }
  }
}
